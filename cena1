var cena1= {
    key: 'cena1',
  
    preload: function () {
      this.load.spritesheet('player', 'assets/Manu (1).png', {
        frameWidth: 157,
        frameHeight: 157
      });
      this.load.image('map', 'assets/inicio-jogo-atualizado.png');
      this.load.image('ground', 'assets/grounddefault.png');
      this.load.spritesheet('enemy', 'assets/idle (7).png', {
        frameWidth: 157,
        frameHeight: 157
      });
      this.load.image('heart', 'assets/heart.png');
      this.load.audio('music', 'assets/Pixel Music Pack/mp3/Pixel 3.mp3');
    },
  
    create: function () {
      
  
      function updatePlayerLives() {
        heartGroup.children.each(function (heart, index) {
          if (index < playerLives) {
            heart.visible = true;
          } else {
            heart.visible = false;
          }
        });
      }
  
      function hitEnemy(player, enemy) {
        if (playerCanHitEnemy) {
          playerLives--;
          updatePlayerLives();
          playerCanHitEnemy = false;
  
          if (playerLives <= 0) {
            this.physics.pause();
            player.setTint(0xff0000);
            this.scene.start('gameover');
          } else {
            player.setX(100);
            player.setY(250);
            this.physics.world.removeCollider(playerCollider);
            this.time.delayedCall(1000, () => {
              playerCanHitEnemy = true;
              playerCollider = this.physics.add.collider(player, enemy, hitEnemy, null, this);
            });
          }
        }
      }
  
      music = this.sound.add('music');
      music.setVolume(0.3);
      music.setLoop(true);
      music.play();
  
      heartGroup = this.add.group();
      this.ground = this.physics.add.staticGroup();
      this.ground.create(1768, 570, 'ground').setScale(1).refreshBody(1);
      this.add.image(1768, 300, 'map');
      this.player = this.physics.add.sprite(100, this.ground.getChildren()[0].y - 500, 'player', 'player');
      this.enemy = this.physics.add.sprite(700, 304, 'enemy');
  
      this.physics.add.collider(this.player, this.ground);
      this.physics.add.collider(this.enemy, this.ground);
      playerCollider = this.physics.add.collider(this.player, this.enemy, hitEnemy, null, this);
      this.player.setCollideWorldBounds(true);
      this.enemy.setCollideWorldBounds(true);
  
      heartGroup.createMultiple({
        key: 'heart',
        repeat: playerLives - 1,
        setXY: { x: 22, y: 22, stepX: 32 },
        setScale: { x: 2, y: 2 }
      });
  
      heartGroup.children.iterate(function (heart) {
        heart.setScrollFactor(0);
      });
  
      this.anims.create({
        key: 'left',
        frames: this.anims.generateFrameNumbers('player', { start: 5, end: 8 }),
        frameRate: 10,
        repeat: -1
      });
  
      this.anims.create({
        key: 'turn',
        frames: [{ key: 'player', frame: 4 }],
        frameRate: 20
      });
  
      this.anims.create({
        key: 'right',
        frames: this.anims.generateFrameNumbers('player', { start: 0, end: 3 }),
        frameRate: 10,
        repeat: -1
      });
  
      this.anims.create({
        key: 'left1',
        frames: [{ key: 'enemy', frame: 0 }],
        frameRate: 10,
        repeat: -1
      });
  
      this.anims.create({
        key: 'turn1',
        frames: [{ key: 'enemy', frame: 1 }],
        frameRate: 20
      });
  
      this.anims.create({
        key: 'right1',
        frames: [{ key: 'enemy', frame: 2 }],
        frameRate: 10,
        repeat: -1
      });
  
      this.cameras.main.setBounds(0, 0, 3536, 600);
      this.cameras.main.startFollow(this.player);
      this.cameras.main.setFollowOffset(0, 0);
      this.cameras.main.setDeadzone(200, 0);
  
      this.physics.world.setBounds(0, 0, 3536, 600);
  
      this.updatePlayerLives = updatePlayerLives;
  
    },
  
    update: function () {
      var cursors = this.input.keyboard.createCursorKeys();
  
      if (cursors.left.isDown) {
        this.player.setVelocityX(-360);
        this.player.anims.play('left', true);
      }
      else if (cursors.right.isDown) {
        this.player.setVelocityX(360);
        this.player.anims.play('right', true);
      }
      else {
        this.player.setVelocityX(0);
        this.player.anims.play('turn');
      }
  
      if (cursors.up.isDown && this.player.body.touching.down) {
        this.player.setVelocityY(-400);
      }
  
      var distance = Phaser.Math.Distance.Between(this.player.x, this.player.y, this.enemy.x, this.enemy.y);
      if (distance < 200) {
        if (this.enemy.x > this.player.x) {
          this.enemy.setVelocityX(-80);
          this.enemy.anims.play('left1', true);
        }
        else {
          this.enemy.setVelocityX(80);
          this.enemy.anims.play('right1', true);
        }
      }
      else {
        this.enemy.setVelocityX(0);
        this.enemy.anims.play('turn1', true);
      }
      if (this.player.x >= 3100) { // Verifica se o jogador chegou ao final da fase
        music.stop();
        this.scene.stop('cena1')
        game.scene.start('boss1'); // Inicia a cena do chefe
        
    }
    }

    
  };
  
  